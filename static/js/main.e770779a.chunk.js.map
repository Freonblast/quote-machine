{"version":3,"sources":["App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["quotesDatabase","content","author","color1","color2","DB","randomNumber","Math","floor","random","QuoteBox","props","state","quote","hoverColor","hoverColorTweet","mainColor","handleTransition","bind","handleColor","handleColorOut","event","oldRandom","document","getElementById","style","opacity","setTimeout","this","setState","target","id","getElementsByTagName","background","color","icon","faQuoteLeft","faQuoteRight","href","backgroundColor","onMouseOver","onMouseOut","faTwitter","onClick","React","Component","App","fetchCount","amount","Promise","resolve","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e770779a.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { faQuoteRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport './App.css';\n\nconst quotesDatabase = [\n  {\n    content: \"That's your best friend and your worst enemy - your own brain.\",\n    author: \"Fred Durst\",\n    color1: \"#C4E0CF\",\n    color2: \"#D5F1E0\"\n  },\n  {\n    content: \"Whether it's the best of times or the worst of times, it's the only time we've got.\",\n    author: \"Art Buchwald\",\n    color1: \"#747FE6\",\n    color2: \"#8590F7\"\n  },\n  {\n    content: \"The best revenge is massive success.\",\n    author: \"Frank Sinatra\",\n    color1: \"#A8A6DB\",\n    color2: \"#B9B7EC\"\n  },\n  {\n    content: \"There are some things you learn best in calm, and some in storm.\",\n    author: \"Willa Cather\",\n    color1: \"#A6D2E1\",\n    color2: \"#B7E3F2\"\n  },\n  {\n    content: \"Living well is the best revenge.\",\n    author: \"George Herbert\",\n    color1: \"#33AA33\",\n    color2: \"#44BB44\"\n  },\n  {\n    content: \"To give anything less than your best is to sacrifice the gift.\",\n    author: \"Steve Prefontaine\",\n    color1: \"#EFCFC3\",\n    color2: \"#FFDFD3\"\n  },\n  {\n    content: \"A problem is a chance for you to do your best.\",\n    author: \"Duke Ellington\",\n    color1: \"#D3BAE9\",\n    color2: \"#E4CBF0\"\n  },\n  {\n    content: \"The best way to predict the future is to create it.\",\n    author: \"Peter Drucker\",\n    color1: \"#0000E8\",\n    color2: \"#0000F9\"\n  },\n  {\n    content: \"The way to get started is to quit talking and begin doing.\",\n    author: \"Walt Disney\",\n    color1: \"#EE0007\",\n    color2: \"#FF0018\"\n  }\n]\n\nlet DB = true;\nlet randomNumber = Math.floor(Math.random() * 9);\n\nclass QuoteBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: quotesDatabase[randomNumber].content,\n      author: quotesDatabase[randomNumber].author,\n      hoverColor: quotesDatabase[randomNumber].color2,\n      hoverColorTweet: quotesDatabase[randomNumber].color2,\n      mainColor: quotesDatabase[randomNumber].color2\n    }\n    this.handleTransition = this.handleTransition.bind(this);\n    this.handleColor = this.handleColor.bind(this);\n    this.handleColorOut = this.handleColorOut.bind(this);\n  }\n  handleTransition(event) {\n    let oldRandom = randomNumber;\n    while (oldRandom === randomNumber) {\n      randomNumber = Math.floor(Math.random() * 9);\n    }\n    document.getElementById(\"quote1\").style.opacity = 0;\n    document.getElementById(\"text\").style.opacity = 0;\n    document.getElementById(\"quote2\").style.opacity = 0;\n    document.getElementById(\"tweet-button\").style.opacity = 0;\n    document.getElementById(\"new-quote\").style.opacity = 0;\n    document.getElementById(\"author\").style.opacity = 0;\n    DB = false;\n    setTimeout(function() {\n      this.setState({\n        quote: quotesDatabase[randomNumber].content,\n        author: quotesDatabase[randomNumber].author,  \n        hoverColor: quotesDatabase[randomNumber].color2,\n        hoverColorTweet: quotesDatabase[randomNumber].color2,\n        mainColor: quotesDatabase[randomNumber].color2\n      })\n      document.getElementById(\"quote1\").style.opacity = 1;\n      document.getElementById(\"text\").style.opacity = 1;\n      document.getElementById(\"quote2\").style.opacity = 1;\n      document.getElementById(\"tweet-button\").style.opacity = 1;\n      document.getElementById(\"new-quote\").style.opacity = 1;\n      document.getElementById(\"author\").style.opacity = 1;\n      DB = true;\n    }.bind(this), 1000)\n  }\n  handleColor(event) {\n    if (DB == true) {\n      if (event.target.id == \"new-quote\") {\n        this.setState({\n          hoverColor: quotesDatabase[randomNumber].color1\n        })\n      }\n      else {\n        this.setState({\n          hoverColorTweet: quotesDatabase[randomNumber].color1\n        })\n    }\n    }\n  }\n  handleColorOut(event) {\n    if (DB == true) {\n      this.setState({\n        hoverColor: quotesDatabase[randomNumber].color2,\n        hoverColorTweet: quotesDatabase[randomNumber].color2\n      })\n    }\n  }\n  render() {\n    document.getElementsByTagName(\"body\")[0].style.background = this.state.mainColor;\n    return (\n      <div id=\"quote-box\" style={{color: this.state.mainColor}}>\n        <FontAwesomeIcon icon={faQuoteLeft} id=\"quote1\"></FontAwesomeIcon>\n        <p id=\"text\">{this.state.quote}</p>\n        <FontAwesomeIcon icon={faQuoteRight} id=\"quote2\"></FontAwesomeIcon>\n        <p id=\"author\"> -{this.state.author}</p>\n        <a href=\"twitter.com/intent/tweet\" target=\"_blank\" id=\"tweet-quote\"><button id=\"tweet-button\" style={{backgroundColor: this.state.hoverColorTweet}} onMouseOver={this.handleColor} onMouseOut={this.handleColorOut}> <FontAwesomeIcon icon={faTwitter}></FontAwesomeIcon> </button></a>\n        <button id=\"new-quote\" style={{backgroundColor: this.state.hoverColor}} onMouseOver={this.handleColor} onMouseOut={this.handleColorOut}onClick={this.handleTransition}> New Quote </button>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <QuoteBox/>\n    );\n  }\n}\n\nexport default App;","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}